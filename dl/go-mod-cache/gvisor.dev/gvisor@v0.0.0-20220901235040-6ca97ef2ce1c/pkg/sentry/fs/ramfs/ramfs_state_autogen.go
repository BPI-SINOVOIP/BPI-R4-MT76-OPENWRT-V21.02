// automatically generated by stateify.

package ramfs

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (d *Dir) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.Dir"
}

func (d *Dir) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"InodeSimpleExtendedAttributes",
		"children",
		"dentryMap",
	}
}

func (d *Dir) beforeSave() {}

// +checklocksignore
func (d *Dir) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.InodeSimpleAttributes)
	stateSinkObject.Save(1, &d.InodeSimpleExtendedAttributes)
	stateSinkObject.Save(2, &d.children)
	stateSinkObject.Save(3, &d.dentryMap)
}

func (d *Dir) afterLoad() {}

// +checklocksignore
func (d *Dir) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.InodeSimpleAttributes)
	stateSourceObject.Load(1, &d.InodeSimpleExtendedAttributes)
	stateSourceObject.Load(2, &d.children)
	stateSourceObject.Load(3, &d.dentryMap)
}

func (dfo *dirFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.dirFileOperations"
}

func (dfo *dirFileOperations) StateFields() []string {
	return []string{
		"dirCursor",
		"dir",
	}
}

func (dfo *dirFileOperations) beforeSave() {}

// +checklocksignore
func (dfo *dirFileOperations) StateSave(stateSinkObject state.Sink) {
	dfo.beforeSave()
	stateSinkObject.Save(0, &dfo.dirCursor)
	stateSinkObject.Save(1, &dfo.dir)
}

func (dfo *dirFileOperations) afterLoad() {}

// +checklocksignore
func (dfo *dirFileOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &dfo.dirCursor)
	stateSourceObject.Load(1, &dfo.dir)
}

func (s *Socket) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.Socket"
}

func (s *Socket) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"InodeSimpleExtendedAttributes",
		"ep",
	}
}

func (s *Socket) beforeSave() {}

// +checklocksignore
func (s *Socket) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.InodeSimpleAttributes)
	stateSinkObject.Save(1, &s.InodeSimpleExtendedAttributes)
	stateSinkObject.Save(2, &s.ep)
}

func (s *Socket) afterLoad() {}

// +checklocksignore
func (s *Socket) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.InodeSimpleAttributes)
	stateSourceObject.Load(1, &s.InodeSimpleExtendedAttributes)
	stateSourceObject.Load(2, &s.ep)
}

func (s *socketFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.socketFileOperations"
}

func (s *socketFileOperations) StateFields() []string {
	return []string{}
}

func (s *socketFileOperations) beforeSave() {}

// +checklocksignore
func (s *socketFileOperations) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
}

func (s *socketFileOperations) afterLoad() {}

// +checklocksignore
func (s *socketFileOperations) StateLoad(stateSourceObject state.Source) {
}

func (s *Symlink) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.Symlink"
}

func (s *Symlink) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"InodeSimpleExtendedAttributes",
		"Target",
	}
}

func (s *Symlink) beforeSave() {}

// +checklocksignore
func (s *Symlink) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.InodeSimpleAttributes)
	stateSinkObject.Save(1, &s.InodeSimpleExtendedAttributes)
	stateSinkObject.Save(2, &s.Target)
}

func (s *Symlink) afterLoad() {}

// +checklocksignore
func (s *Symlink) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.InodeSimpleAttributes)
	stateSourceObject.Load(1, &s.InodeSimpleExtendedAttributes)
	stateSourceObject.Load(2, &s.Target)
}

func (s *symlinkFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/ramfs.symlinkFileOperations"
}

func (s *symlinkFileOperations) StateFields() []string {
	return []string{}
}

func (s *symlinkFileOperations) beforeSave() {}

// +checklocksignore
func (s *symlinkFileOperations) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
}

func (s *symlinkFileOperations) afterLoad() {}

// +checklocksignore
func (s *symlinkFileOperations) StateLoad(stateSourceObject state.Source) {
}

func init() {
	state.Register((*Dir)(nil))
	state.Register((*dirFileOperations)(nil))
	state.Register((*Socket)(nil))
	state.Register((*socketFileOperations)(nil))
	state.Register((*Symlink)(nil))
	state.Register((*symlinkFileOperations)(nil))
}
