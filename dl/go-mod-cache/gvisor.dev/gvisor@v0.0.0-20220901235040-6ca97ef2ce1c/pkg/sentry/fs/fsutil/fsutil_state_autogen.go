// automatically generated by stateify.

package fsutil

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (d *DirtyInfo) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.DirtyInfo"
}

func (d *DirtyInfo) StateFields() []string {
	return []string{
		"Keep",
	}
}

func (d *DirtyInfo) beforeSave() {}

// +checklocksignore
func (d *DirtyInfo) StateSave(stateSinkObject state.Sink) {
	d.beforeSave()
	stateSinkObject.Save(0, &d.Keep)
}

func (d *DirtyInfo) afterLoad() {}

// +checklocksignore
func (d *DirtyInfo) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &d.Keep)
}

func (sdfo *StaticDirFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.StaticDirFileOperations"
}

func (sdfo *StaticDirFileOperations) StateFields() []string {
	return []string{
		"dentryMap",
		"dirCursor",
	}
}

func (sdfo *StaticDirFileOperations) beforeSave() {}

// +checklocksignore
func (sdfo *StaticDirFileOperations) StateSave(stateSinkObject state.Sink) {
	sdfo.beforeSave()
	stateSinkObject.Save(0, &sdfo.dentryMap)
	stateSinkObject.Save(1, &sdfo.dirCursor)
}

func (sdfo *StaticDirFileOperations) afterLoad() {}

// +checklocksignore
func (sdfo *StaticDirFileOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &sdfo.dentryMap)
	stateSourceObject.Load(1, &sdfo.dirCursor)
}

func (n *NoReadWriteFile) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.NoReadWriteFile"
}

func (n *NoReadWriteFile) StateFields() []string {
	return []string{}
}

func (n *NoReadWriteFile) beforeSave() {}

// +checklocksignore
func (n *NoReadWriteFile) StateSave(stateSinkObject state.Sink) {
	n.beforeSave()
}

func (n *NoReadWriteFile) afterLoad() {}

// +checklocksignore
func (n *NoReadWriteFile) StateLoad(stateSourceObject state.Source) {
}

func (scr *FileStaticContentReader) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.FileStaticContentReader"
}

func (scr *FileStaticContentReader) StateFields() []string {
	return []string{
		"content",
	}
}

func (scr *FileStaticContentReader) beforeSave() {}

// +checklocksignore
func (scr *FileStaticContentReader) StateSave(stateSinkObject state.Sink) {
	scr.beforeSave()
	stateSinkObject.Save(0, &scr.content)
}

func (scr *FileStaticContentReader) afterLoad() {}

// +checklocksignore
func (scr *FileStaticContentReader) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &scr.content)
}

func (f *HostFileMapper) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.HostFileMapper"
}

func (f *HostFileMapper) StateFields() []string {
	return []string{
		"refs",
	}
}

func (f *HostFileMapper) beforeSave() {}

// +checklocksignore
func (f *HostFileMapper) StateSave(stateSinkObject state.Sink) {
	f.beforeSave()
	stateSinkObject.Save(0, &f.refs)
}

// +checklocksignore
func (f *HostFileMapper) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &f.refs)
	stateSourceObject.AfterLoad(f.afterLoad)
}

func (h *HostMappable) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.HostMappable"
}

func (h *HostMappable) StateFields() []string {
	return []string{
		"hostFileMapper",
		"backingFile",
		"mappings",
	}
}

func (h *HostMappable) beforeSave() {}

// +checklocksignore
func (h *HostMappable) StateSave(stateSinkObject state.Sink) {
	h.beforeSave()
	stateSinkObject.Save(0, &h.hostFileMapper)
	stateSinkObject.Save(1, &h.backingFile)
	stateSinkObject.Save(2, &h.mappings)
}

func (h *HostMappable) afterLoad() {}

// +checklocksignore
func (h *HostMappable) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &h.hostFileMapper)
	stateSourceObject.Load(1, &h.backingFile)
	stateSourceObject.Load(2, &h.mappings)
}

func (s *SimpleFileInode) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.SimpleFileInode"
}

func (s *SimpleFileInode) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
	}
}

func (s *SimpleFileInode) beforeSave() {}

// +checklocksignore
func (s *SimpleFileInode) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.InodeSimpleAttributes)
}

func (s *SimpleFileInode) afterLoad() {}

// +checklocksignore
func (s *SimpleFileInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.InodeSimpleAttributes)
}

func (n *NoReadWriteFileInode) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.NoReadWriteFileInode"
}

func (n *NoReadWriteFileInode) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
	}
}

func (n *NoReadWriteFileInode) beforeSave() {}

// +checklocksignore
func (n *NoReadWriteFileInode) StateSave(stateSinkObject state.Sink) {
	n.beforeSave()
	stateSinkObject.Save(0, &n.InodeSimpleAttributes)
}

func (n *NoReadWriteFileInode) afterLoad() {}

// +checklocksignore
func (n *NoReadWriteFileInode) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &n.InodeSimpleAttributes)
}

func (i *InodeSimpleAttributes) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.InodeSimpleAttributes"
}

func (i *InodeSimpleAttributes) StateFields() []string {
	return []string{
		"fsType",
		"unstable",
	}
}

func (i *InodeSimpleAttributes) beforeSave() {}

// +checklocksignore
func (i *InodeSimpleAttributes) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.fsType)
	stateSinkObject.Save(1, &i.unstable)
}

func (i *InodeSimpleAttributes) afterLoad() {}

// +checklocksignore
func (i *InodeSimpleAttributes) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.fsType)
	stateSourceObject.Load(1, &i.unstable)
}

func (i *InodeSimpleExtendedAttributes) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.InodeSimpleExtendedAttributes"
}

func (i *InodeSimpleExtendedAttributes) StateFields() []string {
	return []string{
		"xattrs",
	}
}

func (i *InodeSimpleExtendedAttributes) beforeSave() {}

// +checklocksignore
func (i *InodeSimpleExtendedAttributes) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.xattrs)
}

func (i *InodeSimpleExtendedAttributes) afterLoad() {}

// +checklocksignore
func (i *InodeSimpleExtendedAttributes) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.xattrs)
}

func (s *staticFile) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.staticFile"
}

func (s *staticFile) StateFields() []string {
	return []string{
		"FileStaticContentReader",
	}
}

func (s *staticFile) beforeSave() {}

// +checklocksignore
func (s *staticFile) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.FileStaticContentReader)
}

func (s *staticFile) afterLoad() {}

// +checklocksignore
func (s *staticFile) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.FileStaticContentReader)
}

func (i *InodeStaticFileGetter) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.InodeStaticFileGetter"
}

func (i *InodeStaticFileGetter) StateFields() []string {
	return []string{
		"Contents",
	}
}

func (i *InodeStaticFileGetter) beforeSave() {}

// +checklocksignore
func (i *InodeStaticFileGetter) StateSave(stateSinkObject state.Sink) {
	i.beforeSave()
	stateSinkObject.Save(0, &i.Contents)
}

func (i *InodeStaticFileGetter) afterLoad() {}

// +checklocksignore
func (i *InodeStaticFileGetter) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &i.Contents)
}

func (c *CachingInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.CachingInodeOperations"
}

func (c *CachingInodeOperations) StateFields() []string {
	return []string{
		"backingFile",
		"mfp",
		"opts",
		"attr",
		"dirtyAttr",
		"mappings",
		"cache",
		"dirty",
		"hostFileMapper",
		"refs",
	}
}

func (c *CachingInodeOperations) beforeSave() {}

// +checklocksignore
func (c *CachingInodeOperations) StateSave(stateSinkObject state.Sink) {
	c.beforeSave()
	stateSinkObject.Save(0, &c.backingFile)
	stateSinkObject.Save(1, &c.mfp)
	stateSinkObject.Save(2, &c.opts)
	stateSinkObject.Save(3, &c.attr)
	stateSinkObject.Save(4, &c.dirtyAttr)
	stateSinkObject.Save(5, &c.mappings)
	stateSinkObject.Save(6, &c.cache)
	stateSinkObject.Save(7, &c.dirty)
	stateSinkObject.Save(8, &c.hostFileMapper)
	stateSinkObject.Save(9, &c.refs)
}

func (c *CachingInodeOperations) afterLoad() {}

// +checklocksignore
func (c *CachingInodeOperations) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &c.backingFile)
	stateSourceObject.Load(1, &c.mfp)
	stateSourceObject.Load(2, &c.opts)
	stateSourceObject.Load(3, &c.attr)
	stateSourceObject.Load(4, &c.dirtyAttr)
	stateSourceObject.Load(5, &c.mappings)
	stateSourceObject.Load(6, &c.cache)
	stateSourceObject.Load(7, &c.dirty)
	stateSourceObject.Load(8, &c.hostFileMapper)
	stateSourceObject.Load(9, &c.refs)
}

func (c *CachingInodeOperationsOptions) StateTypeName() string {
	return "pkg/sentry/fs/fsutil.CachingInodeOperationsOptions"
}

func (c *CachingInodeOperationsOptions) StateFields() []string {
	return []string{
		"ForcePageCache",
		"LimitHostFDTranslation",
	}
}

func (c *CachingInodeOperationsOptions) beforeSave() {}

// +checklocksignore
func (c *CachingInodeOperationsOptions) StateSave(stateSinkObject state.Sink) {
	c.beforeSave()
	stateSinkObject.Save(0, &c.ForcePageCache)
	stateSinkObject.Save(1, &c.LimitHostFDTranslation)
}

func (c *CachingInodeOperationsOptions) afterLoad() {}

// +checklocksignore
func (c *CachingInodeOperationsOptions) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &c.ForcePageCache)
	stateSourceObject.Load(1, &c.LimitHostFDTranslation)
}

func init() {
	state.Register((*DirtyInfo)(nil))
	state.Register((*StaticDirFileOperations)(nil))
	state.Register((*NoReadWriteFile)(nil))
	state.Register((*FileStaticContentReader)(nil))
	state.Register((*HostFileMapper)(nil))
	state.Register((*HostMappable)(nil))
	state.Register((*SimpleFileInode)(nil))
	state.Register((*NoReadWriteFileInode)(nil))
	state.Register((*InodeSimpleAttributes)(nil))
	state.Register((*InodeSimpleExtendedAttributes)(nil))
	state.Register((*staticFile)(nil))
	state.Register((*InodeStaticFileGetter)(nil))
	state.Register((*CachingInodeOperations)(nil))
	state.Register((*CachingInodeOperationsOptions)(nil))
}
