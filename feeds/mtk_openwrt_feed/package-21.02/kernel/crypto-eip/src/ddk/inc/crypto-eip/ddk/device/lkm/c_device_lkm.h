/* c_device_lkm.h
 *
 * Configuration Handling for Driver Framework Device API implementation.
 * A build-level configuration file is included and sanity-checked.
 * Do not edit this file. Edit cs_hwpal_lkm.h instead.
 */

/*****************************************************************************
* Copyright (c) 2010-2020 by Rambus, Inc. and/or its subsidiaries.
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

/*----------------------------------------------------------------
 * get configuration settings from product config file
 */

// Top-level Hardware platform configuration
#include "cs_hwpal_lkm.h"


// Enables strict argument checking for input parameters
//#define HWPAL_STRICT_ARGS_CHECK

// choose from LOG_SEVERITY_INFO, LOG_SEVERITY_WARN, LOG_SEVERITY_CRIT
#ifndef LOG_SEVERITY_MAX
#define LOG_SEVERITY_MAX LOG_SEVERITY_INFO
#endif

#ifndef HWPAL_MAX_DEVICE_NAME_LENGTH
#error "HWPAL_MAX_DEVICE_NAME_LENGTH undefined"
#endif

#ifndef HWPAL_DEVICES
#error " HWPAL_DEVICES undefined"
#endif

// Device driver name used for looking up the device and reporting
#ifndef HWPAL_DRIVER_NAME
#define HWPAL_DRIVER_NAME "Security"
#endif

/*----------------------------------------------------------------
 * Other configuration parameters that can be set in a top level
 * configuration
 */

/* HWPAL_DEVICE_ID
 *
 * Device identification required for implementation of Device API
 */

/* HWPAL_VENDOR_ID
 *
 * Device vendor identification required for implementation of Device API
 */

/* HWPAL_DEVICE_RESOURCE_ID
 *
 * Device resource identification required for implementation of Device API
 */
#ifndef HWPAL_DEVICE_RESOURCE_ID
#define HWPAL_DEVICE_RESOURCE_ID        0
#endif

/* HWPAL_DEVICE_RESOURCE_BYTE_COUNT
 *
 * Device resource size (in bytes), if 0 then the resource maximum size will be
 * determined and used.
 *
 */
#ifndef HWPAL_DEVICE_RESOURCE_BYTE_COUNT
#define HWPAL_DEVICE_RESOURCE_BYTE_COUNT        0 // Use the entire resource
#endif

/* HWPAL_REMAP_ADDRESSES
 *
 * Macro that can be used to remap a device static resource offset
 * (a relative address) to another address
 *
 * Example:
 * #define HWPAL_REMAP_ADDRESSES     HWPAL_REMAP_ONE(0x71004, 0x71200);
 *
 */

/* HWPAL_DEVICE_MAGIC
 *
 * Optional magic number used to validate device administration data
 */

/* HWPAL_DEVICE_DIRECT_MEMIO
 *
 * Enable this parameter in order to use the direct memory I/O
 * operations bypassing the Linux kernel memory I/O API
 */

/* HWPAL_PLATFORM_IRQ_IDX
 *
 * Platform-specific index of the IRQ that will be used.
 *
 */
#ifndef HWPAL_PLATFORM_IRQ_IDX
#define HWPAL_PLATFORM_IRQ_IDX 0
#endif

/* HWPAL_USE_UMDEVXS_DEVICE
 *
 * Use external Linux kernel device data structure provided by the kernel
 * after instantiating the device driver in the kernel.
 *
 */
//#define HWPAL_USE_UMDEVXS_DEVICE

/* HWPAL_DEVICE_READ_DELAY_US
 *
 * Device_Read32() function will busy wait for the specified number
 * of microseconds before actually performing the read operation.
 *
 * Note: This is a workaround for posted-writes implementation of
 *       the MMIO register slave interface
 *       (when too fast write-read sequence does not work)
 *
 *
 */
//#define HWPAL_DEVICE_READ_DELAY_US    100


/* HWPAL_DEVICE_USE_RPM
 *
 * Enables use of runtime power management
 */
//#define HWPAL_DEVICE_USE_RPM


/* end of file c_device_lkm.h */
