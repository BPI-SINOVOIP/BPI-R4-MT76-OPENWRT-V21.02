/* c_dmares_lkm.h
 *
 * Configuration Handling for Driver Framework DMAResource API implementation.
 * A build-level configuration file is included and sanity-checked.
 * Do not edit this file. Edit cs_hwpal_lkm.h instead.
 *
 */

/*****************************************************************************
* Copyright (c) 2010-2020 by Rambus, Inc. and/or its subsidiaries.
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

#ifndef C_DMARES_LKM_H_
#define C_DMARES_LKM_H_


/*----------------------------------------------------------------
 * get configuration settings from product config file
 */

// Top-level Hardware platform configuration
#include "cs_hwpal_lkm.h"

// choose from LOG_SEVERITY_INFO, LOG_SEVERITY_WARN, LOG_SEVERITY_CRIT
#ifndef LOG_SEVERITY_MAX
#define LOG_SEVERITY_MAX LOG_SEVERITY_INFO
#endif

#ifndef HWPAL_DMA_NRESOURCES
#error "Expected HWPAL_DMA_NRESOURCES defined by cs_hwpal_lkm.h"
#endif

#if HWPAL_DMA_NRESOURCES < 8
#error "HWPAL_DMA_NRESOURCES too small"
#endif


/*----------------------------------------------------------------
 * Other configuration parameters that can be set in a top level
 * configuration
 */

/* HWPAL_DMARESOURCE_ALLOC_CACHE_COHERENT
 *
 * Enable this parameter in order to use the coherent Linux DMA mappings,
 * all allocated DMA buffers will be cache-coherent.
 */

/* HWPAL_DMARESOURCE_MINIMUM_CACHE_CONTROL
 *
 * Enable this parameter in order to use the minimal Linux DMA API,
 * this will also make the Linux Kernel to perform less sanity checks
 * on the provided DMA buffers
 */

#if defined(HWPAL_DMARESOURCE_ALLOC_CACHE_COHERENT) && \
    defined(HWPAL_DMARESOURCE_MINIMUM_CACHE_CONTROL)
#error "Error: Cannot define both HWPAL_DMARESOURCE_ALLOC_CACHE_COHERENT and" \
       " HWPAL_DMARESOURCE_MINIMUM_CACHE_CONTROL at the same time"
#endif

// Note: D-cache line size,
//       this can be customized for some platforms to other value.
//       The implementation will ask OS for this parameter if not defined.
#if 0
#ifndef HWPAL_DMARESOURCE_DCACHE_LINE_SIZE
#ifdef HWPAL_64BIT_HOST
// Note: D-cache line size,
//       this can be customized for some platforms to other value
#define HWPAL_DMARESOURCE_DCACHE_LINE_SIZE          64 // 64 bytes
#else
#define HWPAL_DMARESOURCE_DCACHE_LINE_SIZE          32 // 32 bytes
#endif
#endif // !HWPAL_DMARESOURCE_DCACHE_LINE_SIZE
#endif

/* HWPAL_DMARESOURCE_BANK_STATIC_OFFSET
 *
 * Internal memory offset as seen by the CPU but not by the EIP HW device,
 * used for static DMA banks
 */
#ifndef HWPAL_DMARESOURCE_BANK_STATIC_OFFSET
#define HWPAL_DMARESOURCE_BANK_STATIC_OFFSET    0
#endif

/* HWPAL_DMARESOURCE_UNCACHED_MAPPING
 *
 * When defined enables use of ioremap_cache for mapping memory as non-cached
 * used for static DMA banks
 */
//#define HWPAL_DMARESOURCE_UNCACHED_MAPPING

/* HWPAL_DMARESOURCE_ADDR_MASK
 *
 * DMA address mask, e.g. how many address bits the device can use
 */
#ifndef HWPAL_DMARESOURCE_ADDR_MASK
#ifdef HWPAL_DMARESOURCE_64BIT
#define HWPAL_DMARESOURCE_ADDR_MASK 0xffffffffffL
#else
#define HWPAL_DMARESOURCE_ADDR_MASK 0xffffffff
#endif
#endif

// When defined enables strict argument checking
//#define HWPAL_DMARESOURCE_STRICT_ARGS_CHECKS


#endif // C_DMARES_LKM_H_


/* end of file c_dmares_lkm.h */
