From f80b9b330efd9d675c7c548c5af459792037ca99 Mon Sep 17 00:00:00 2001
From: Bo-Cun Chen <bc-bocun.chen@mediatek.com>
Date: Tue, 26 Dec 2023 16:46:16 +0800
Subject: [PATCH] 999-3022-mediatek-ethernet-add-multiple-ppe-allocatiion.patch

---
 arch/arm64/boot/dts/mediatek/mt7988.dtsi      |  1 +
 drivers/net/ethernet/mediatek/mtk_eth_soc.c   | 19 +++++++++++++++++--
 drivers/net/ethernet/mediatek/mtk_eth_soc.h   |  3 +++
 .../net/ethernet/mediatek/mtk_ppe_offload.c   | 10 ++++++++++
 4 files changed, 31 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/boot/dts/mediatek/mt7988.dtsi b/arch/arm64/boot/dts/mediatek/mt7988.dtsi
index 44a2f1b..cf50542 100644
--- a/arch/arm64/boot/dts/mediatek/mt7988.dtsi
+++ b/arch/arm64/boot/dts/mediatek/mt7988.dtsi
@@ -949,6 +949,7 @@
 		mediatek,infracfg = <&topmisc>;
 		mediatek,toprgu = <&watchdog>;
 		mediatek,hwver = <&hwver>;
+		mtketh-ppe-num = <3>;
 		#reset-cells = <1>;
 		#address-cells = <1>;
 		#size-cells = <0>;
diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
index 4cdfead..9009960 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -2170,6 +2170,7 @@ static int mtk_poll_rx(struct napi_struct *napi, int budget,
 	u8 *data, *new_data;
 	struct mtk_rx_dma_v2 *rxd, trxd;
 	int done = 0;
+	int i;
 
 	if (unlikely(!ring))
 		goto rx_done;
@@ -2277,7 +2278,8 @@ static int mtk_poll_rx(struct napi_struct *napi, int budget,
 #if defined(CONFIG_MEDIATEK_NETSYS_RX_V2) || defined(CONFIG_MEDIATEK_NETSYS_V3)
 		reason = FIELD_GET(MTK_RXD5_PPE_CPU_REASON_V2, trxd.rxd5);
 		if (reason == MTK_PPE_CPU_REASON_HIT_UNBIND_RATE_REACHED) {
-			mtk_ppe_check_skb(eth->ppe[0], skb,
+			i = eth->mac[mac]->ppe_idx;
+			mtk_ppe_check_skb(eth->ppe[i], skb,
 					  trxd.rxd5 & MTK_RXD5_FOE_ENTRY_V2);
 		}
 #else
@@ -3781,7 +3783,19 @@ static int mtk_open(struct net_device *dev)
 			     SGMSYS_QPHY_PWR_STATE_CTRL, 0);
 
 	if (eth->soc->offload_version) {
-			gdm_config = MTK_GDMA_TO_PPE0;
+#if defined(CONFIG_MEDIATEK_NETSYS_V2) || defined(CONFIG_MEDIATEK_NETSYS_V3)
+			if (eth->ppe_num >= 3 && mac->id == 2) {
+				mac->ppe_idx = 2;
+				gdm_config = MTK_GDMA_TO_PPE2;
+			} else if (eth->ppe_num >= 2 && mac->id == 1) {
+				mac->ppe_idx = 1;
+				gdm_config = MTK_GDMA_TO_PPE1;
+			} else
+#endif
+			{
+				mac->ppe_idx = 0;
+				gdm_config = MTK_GDMA_TO_PPE0;
+			}
 
 			for (i = 0; i < eth->ppe_num; i++)
 				mtk_ppe_start(eth->ppe[i]);
@@ -4748,6 +4762,7 @@ static const struct net_device_ops mtk_netdev_ops = {
 	.ndo_poll_controller	= mtk_poll_controller,
 #endif
 	.ndo_setup_tc		= mtk_eth_setup_tc,
+	.ndo_fill_receive_path	= mtk_eth_fill_receive_path,
 };
 
 static void mux_poll(struct work_struct *work)
diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.h b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
index 12ffb3c..1bf335c 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -1945,6 +1945,7 @@ struct mtk_mac {
 	phy_interface_t			interface;
 	unsigned int			mode;
 	unsigned int			type;
+	unsigned int			ppe_idx;
 	int				speed;
 	struct device_node		*of_node;
 	struct phylink			*phylink;
@@ -2045,6 +2046,8 @@ int mtk_eth_setup_tc(struct net_device *dev, enum tc_setup_type type,
 		     void *type_data);
 int mtk_eth_setup_tc_block(struct net_device *dev, struct flow_block_offload *f,
 			   struct mtk_eth *eth);
+int mtk_eth_fill_receive_path(struct net_device_path_ctx *ctx,
+			      struct net_device_path *path);
 void mtk_eth_set_dma_device(struct mtk_eth *eth, struct device *dma_dev);
 u32 mtk_rss_indr_table(struct mtk_rss_params *rss_params, int index);
 
diff --git a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
index 339359e..8f721ba 100644
--- a/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe_offload.c
@@ -693,6 +693,16 @@ int mtk_eth_setup_tc(struct net_device *dev, enum tc_setup_type type,
 	}
 }
 
+int mtk_eth_fill_receive_path(struct net_device_path_ctx *ctx,
+			      struct net_device_path *path)
+{
+	struct mtk_mac *mac = netdev_priv(ctx->dev);
+
+	path->mtk_wdma.wdma_idx = mac->ppe_idx;
+
+	return 0;
+}
+
 int mtk_eth_offload_init(struct mtk_eth *eth, int id)
 {
 	if (!eth->ppe[id] || !eth->ppe[id]->foe_table)
-- 
2.18.0

